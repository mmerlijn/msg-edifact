<?php

namespace mmerlijn\msgEdifact\tests\Unit\segments;

use Carbon\Carbon;
use mmerlijn\msgEdifact\Edifact;
use mmerlijn\msgRepo\Msg;

class UNBTest extends \mmerlijn\msgEdifact\tests\TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->edifact = new Edifact("UNB+UNOA:1+50001234+50004321+211011:1530+ad12345678'");

    }

    public function test_sender_setter()
    {
        $msg = new Msg();
        $edifact = new Edifact();

        $msg->sender->agbcode = "90001122";
        $edifact->setMsg($msg);
        $this->assertStringContainsString('UNB+UNOA:1+90001122', $edifact->write());
    }

    public function test_sender_getter()
    {
        $msg = $this->edifact->getMsg(new Msg());
        $array = $msg->toArray();
        $this->assertSame("50001234", $msg->sender->agbcode);
        $this->assertSame("50001234", $array['sender']['agbcode']);
    }

    public function test_receiver_setter()
    {
        $msg = new Msg();
        $edifact = new Edifact();

        $msg->sender->agbcode = "90001122";
        $msg->receiver->agbcode = "90001133";
        $edifact->setMsg($msg);
        $this->assertStringContainsString('UNB+UNOA:1+90001122+90001133', $edifact->write());
    }

    public function test_receiver_getter()
    {
        $msg = $this->edifact->getMsg(new Msg());
        $array = $msg->toArray();
        $this->assertSame("50004321", $msg->receiver->agbcode);
        $this->assertSame("50004321", $array['receiver']['agbcode']);
    }

    public function test_datetime_setter()
    {
        $msg = new Msg();
        $edifact = new Edifact();

        $msg->datetime = Carbon::create("2020-10-11 14:00:00");
        $edifact->setMsg($msg);
        $this->assertStringContainsString('UNB+UNOA:1+++201011:1400', $edifact->write());
    }

    public function test_datetime_getter()
    {
        $msg = $this->edifact->getMsg(new Msg());
        $this->assertSame("2021-10-11 15:30:00", $msg->datetime->format("Y-m-d H:i:s"));
    }

    public function test_reference_setter()
    {
        $msg = new Msg();
        $edifact = new Edifact();

        $msg->processing_id = "ab12345678";
        $edifact->setMsg($msg);
        $this->assertStringContainsString('+ab12345678', $edifact->write());
    }

    public function test_reference_getter()
    {
        $msg = $this->edifact->getMsg(new Msg());
        $this->assertSame("ad12345678", $msg->processing_id);
        $array = $msg->toArray();
        $this->assertSame("ad12345678", $array['processing_id']);
    }

    public function test_validation()
    {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches('/sender_agbcode required/');
        $this->expectExceptionMessageMatches('/receiver_agbcode required/');
        $this->expectExceptionMessageMatches('/processing_id required/');
        $edifact = (new Edifact())->setMsg(new Msg());
        $edifact->write(true);

    }
}