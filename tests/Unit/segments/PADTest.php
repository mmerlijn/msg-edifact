<?php

namespace mmerlijn\msgEdifact\tests\Unit\segments;

use mmerlijn\msgEdifact\Edifact;
use mmerlijn\msgRepo\Address;
use mmerlijn\msgRepo\Msg;
use mmerlijn\msgRepo\Phone;

class PADTest extends \mmerlijn\msgEdifact\tests\TestCase
{
    public $edifact;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->edifact = new Edifact("PAD+New Street:10a::Down Town:1000BB+0123456789'");

    }

    public function test_address_and_phone_getter()
    {
        $msg = $this->edifact->getMsg(new Msg());
        $array = $msg->toArray();
        $this->assertSame('New Street', $msg->patient->address->street);
        $this->assertSame('10 a', $msg->patient->address->building);
        $this->assertSame('Down Town', $msg->patient->address->city);
        $this->assertSame('1000BB', $msg->patient->address->postcode);
        $this->assertSame('0123456789', $msg->patient->phones[0]->number);
    }

    public function test_address_and_phone_setter()
    {
        $msg = new Msg();
        $edifact = new Edifact();
        $msg->patient->setAddress(new Address(street: "Street", building: "8", postcode: "1000AA", city: "Amsterdam"));
        $msg->patient->addPhone("1122334455");
        $edifact->setMsg($msg);
        $this->assertStringContainsString('PAD+Street:8::Amsterdam:1000AA+112 2334 455', $edifact->write());
    }

    public function test_validation()
    {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches('/patient_street re/');
        $this->expectExceptionMessageMatches('/patient_city re/');
        $edifact = (new Edifact())->setMsg(new Msg());
        $edifact->write(true);

    }

}